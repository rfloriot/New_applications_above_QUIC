// Code generated by MockGen. DO NOT EDIT.
// Source: ../handshake/mint_utils.go

package mockhandshake

import (
	reflect "reflect"

	mint "github.com/bifurcation/mint"
	gomock "github.com/golang/mock/gomock"
)

// MockmintTLS is a mock of mintTLS interface
type MockmintTLS struct {
	ctrl     *gomock.Controller
	recorder *MockmintTLSMockRecorder
}

// MockmintTLSMockRecorder is the mock recorder for MockmintTLS
type MockmintTLSMockRecorder struct {
	mock *MockmintTLS
}

// NewMockmintTLS creates a new mock instance
func NewMockmintTLS(ctrl *gomock.Controller) *MockmintTLS {
	mock := &MockmintTLS{ctrl: ctrl}
	mock.recorder = &MockmintTLSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockmintTLS) EXPECT() *MockmintTLSMockRecorder {
	return _m.recorder
}

// GetCipherSuite mocks base method
func (_m *MockmintTLS) GetCipherSuite() mint.CipherSuiteParams {
	ret := _m.ctrl.Call(_m, "GetCipherSuite")
	ret0, _ := ret[0].(mint.CipherSuiteParams)
	return ret0
}

// GetCipherSuite indicates an expected call of GetCipherSuite
func (_mr *MockmintTLSMockRecorder) GetCipherSuite() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetCipherSuite", reflect.TypeOf((*MockmintTLS)(nil).GetCipherSuite))
}

// ComputeExporter mocks base method
func (_m *MockmintTLS) ComputeExporter(label string, context []byte, keyLength int) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ComputeExporter", label, context, keyLength)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeExporter indicates an expected call of ComputeExporter
func (_mr *MockmintTLSMockRecorder) ComputeExporter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ComputeExporter", reflect.TypeOf((*MockmintTLS)(nil).ComputeExporter), arg0, arg1, arg2)
}

// Handshake mocks base method
func (_m *MockmintTLS) Handshake() mint.Alert {
	ret := _m.ctrl.Call(_m, "Handshake")
	ret0, _ := ret[0].(mint.Alert)
	return ret0
}

// Handshake indicates an expected call of Handshake
func (_mr *MockmintTLSMockRecorder) Handshake() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Handshake", reflect.TypeOf((*MockmintTLS)(nil).Handshake))
}

// State mocks base method
func (_m *MockmintTLS) State() mint.ConnectionState {
	ret := _m.ctrl.Call(_m, "State")
	ret0, _ := ret[0].(mint.ConnectionState)
	return ret0
}

// State indicates an expected call of State
func (_mr *MockmintTLSMockRecorder) State() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "State", reflect.TypeOf((*MockmintTLS)(nil).State))
}
